name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint-and-type-check:
    name: Lint and Type Check (Modern Stack)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev ruff mypy bandit pip-audit
    
    - name: Run Ruff linter
      run: |
        uv run ruff check src/ tests/ --output-format=github
    
    - name: Run Ruff formatter check
      run: |
        uv run ruff format --check src/ tests/
    
    - name: Run MyPy type checker
      run: |
        uv run mypy src/music21_mcp/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fluidsynth musescore3

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add pytest pytest-cov pytest-asyncio

    - name: Configure music21 for CI
      run: |
        uv run python -c "
        import music21
        from music21 import environment
        env = environment.Environment()
        env['directoryScratch'] = '/tmp/music21'
        env['autoDownload'] = 'deny'
        print('Music21 configured for CI')
        "

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v \
          --cov=src/music21_mcp \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    - name: Run OAuth2 tests
      env:
        REDIS_URL: redis://localhost:6379/1
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_oauth2.py -v --cov=src/music21_mcp/auth --cov-append

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379/2
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/integration/ -v --cov=src/music21_mcp --cov-append

    - name: Run comprehensive tool tests
      env:
        REDIS_URL: redis://localhost:6379/3
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_tools_comprehensive.py -v --cov=src/music21_mcp/tools --cov-append

    - name: Run server tests
      env:
        REDIS_URL: redis://localhost:6379/4
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_server_pytest.py -v --cov=src/music21_mcp --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run bandit security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Run pip-audit vulnerability scan
      run: |
        uv run pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true

    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          bandit-results.json
          pip-audit-results.json

  build:
    name: Build and Test Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build distribution
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Store distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: dist/

  docker:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-validation:
    name: Deployment Config Validation
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Docker configs
      run: |
        # Validate docker-compose files
        if [ -f deploy/docker/docker-compose.yml ]; then
          docker-compose -f deploy/docker/docker-compose.yml config
        fi

    - name: Validate YAML syntax
      run: |
        # Check all YAML files for syntax errors
        find deploy/ -name "*.yaml" -o -name "*.yml" | xargs -I {} sh -c 'echo "Checking {}" && python -c "import yaml; yaml.safe_load(open(\"{}\"))"'