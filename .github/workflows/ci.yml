name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install flake8 black isort mypy types-requests types-redis
    
    - name: Run Black formatter check
      run: |
        black --check --diff src/
    
    - name: Run import sorting check
      run: |
        isort --check-only --diff src/
    
    - name: Run flake8 linter
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run MyPy type checker
      run: |
        mypy src/music21_mcp/ --ignore-missing-imports --no-strict-optional

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          libasound2-dev \
          libportaudio2 \
          libportaudiocpp0 \
          portaudio19-dev \
          espeak \
          espeak-data \
          libespeak1 \
          libespeak-dev \
          ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -e .
        python -m pip install pytest pytest-cov pytest-asyncio pytest-mock
        python -m pip install redis fastapi uvicorn music21

    - name: Configure music21 for offline use
      run: |
        python -c "
        import music21
        from music21 import environment
        env = environment.Environment()
        env['directoryScratch'] = '/tmp/music21'
        env['autoDownload'] = 'deny'
        print('Music21 configured for offline use')
        "

    - name: Run unit tests
      env:
        REDIS_URL: redis://localhost:6379/0
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/unit/ -v --cov=src/music21_mcp --cov-report=xml --cov-report=html

    - name: Run OAuth2 tests
      env:
        REDIS_URL: redis://localhost:6379/1
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_oauth2.py -v --cov=src/music21_mcp/auth --cov-append

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379/2
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/integration/ -v --cov=src/music21_mcp --cov-append

    - name: Run comprehensive tool tests
      env:
        REDIS_URL: redis://localhost:6379/3
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_tools_comprehensive.py -v --cov=src/music21_mcp/tools --cov-append

    - name: Run server tests
      env:
        REDIS_URL: redis://localhost:6379/4
        LOG_LEVEL: DEBUG
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-ci-only
      run: |
        python -m pytest tests/test_server_pytest.py -v --cov=src/music21_mcp --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install safety bandit semgrep

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json || true

    - name: Run semgrep
      run: |
        semgrep --config=auto src/ --json || true

  build:
    name: Build and Test Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build distribution
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Store distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: dist/

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build --target production -t music21-mcp-server:test .

    - name: Test Docker image
      run: |
        # Start Redis for testing
        docker run -d --name redis-test -p 6379:6379 redis:7-alpine
        
        # Wait for Redis to be ready
        sleep 10
        
        # Test the image
        docker run --rm --network host \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e LOG_LEVEL=INFO \
          -e ENABLE_DEMO_USERS=true \
          -e JWT_SECRET=test-secret \
          music21-mcp-server:test python -c "
        import sys
        sys.path.insert(0, '/app/src')
        from music21_mcp.server_remote import create_app
        app = create_app()
        print('âœ… Server created successfully')
        "
        
        # Cleanup
        docker stop redis-test

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'music21-mcp-server:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  kubernetes:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        # Validate YAML syntax
        for file in k8s/*.yaml; do
          echo "Validating $file"
          kubectl apply --dry-run=client -f "$file" || exit 1
        done

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Validate Helm chart
      run: |
        cd helm/music21-mcp
        helm dependency update
        helm lint .
        helm template test . --debug

    - name: Run Helm dry-run
      run: |
        cd helm/music21-mcp
        helm install test . --dry-run --debug

  stress-test:
    name: Stress Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, docker]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pytest pytest-asyncio music21

    - name: Configure music21 for offline use
      run: |
        python -c "
        import music21
        from music21 import environment
        env = environment.Environment()
        env['directoryScratch'] = '/tmp/music21'
        env['autoDownload'] = 'deny'
        print('Music21 configured for offline use')
        "

    - name: Run simple stress test
      env:
        REDIS_URL: redis://localhost:6379/0
        LOG_LEVEL: INFO
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-stress-test
      run: |
        python -m pytest tests/performance/simple_stress_test.py -v

    - name: Run production readiness test
      env:
        REDIS_URL: redis://localhost:6379/1
        LOG_LEVEL: INFO
        ENABLE_DEMO_USERS: true
        JWT_SECRET: test-secret-for-production-test
      run: |
        python tests/performance/run_production_test_lite.py